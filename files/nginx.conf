env SERVER_NAME;

user root;
worker_processes 4;
daemon off;
#worker_rlimit_nofile
error_log /dev/stdout info;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    #multi_accept on;
    #use
}

http {
    perl_modules perl/lib;

    perl_set $server_name_from_env 'sub { return $ENV{"SERVER_NAME"}; }';

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    #access_log off;
    access_log /dev/stdout;
    server_tokens off;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;

    keepalive_timeout 65;

    gzip on;
    gzip_http_version 1.0;
    gzip_comp_level 2;
    gzip_proxied any;
    gzip_vary off;
    #gzip_buffers
    gzip_types text/plain text/css application/x-javascript text/xml application/xml application/rss+xml application/atom+xml text/javascript application/javascript application/json text/mathml;
    gzip_min_length  1000;
    gzip_disable     MSIE [1-6]\.;

    server_names_hash_bucket_size 64;
    types_hash_max_size 2048;
    types_hash_bucket_size 64;
    #proxy_read_timeout
    #client_body_buffer_size
    #client_max_body_size

    limit_req_zone $binary_remote_addr zone=default:10m rate=1r/s;

    proxy_cache_path /var/www/nginx/cache levels=1:2 keys_zone=cache-space:4m max_size=50m inactive=120m;
    proxy_temp_path /var/www/nginx/tmp;

    upstream myapp {
      server unix:///app/tmp/puma.sock;
    }

    server {
      listen 80;
      server_name $server_name_from_env;

      # ~2 seconds is often enough for most folks to parse HTML/CSS and
      # retrieve needed images/icons/frames, connections are cheap in
      # nginx so increasing this is generally safe...
      keepalive_timeout 5;

      # path for static files
      root /app/public;
      access_log /dev/stdout;
      error_log /dev/stdout info;

      # this rewrites all the requests to the maintenance.html
      # page if it exists in the doc root. This is for capistrano's
      # disable web task
      if (-f $document_root/maintenance.html) {
        rewrite  ^(.*)$  /maintenance.html last;
        break;
      }

      location / {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;

        # If the file exists as a static file serve it directly without
        # running all the other rewite tests on it
        if (-f $request_filename) {
          break;
        }

        # check for index.html for directory index
        # if its there on the filesystem then rewite
        # the url to add /index.html to the end of it
        # and then break to send it to the next config rules.
        if (-f $request_filename/index.html) {
          rewrite (.*) $1/index.html break;
        }

        # this is the meat of the rack page caching config
        # it adds .html to the end of the url and then checks
        # the filesystem for that file. If it exists, then we
        # rewite the url to have explicit .html on the end
        # and then send it on its way to the next config rule.
        # if there is no file on the fs then it sets all the
        # necessary headers and proxies to our upstream pumas
        if (-f $request_filename.html) {
          rewrite (.*) $1.html break;
        }

        if (!-f $request_filename) {
          proxy_pass http://myapp;
          break;
        }
      }

      # Now this supposedly should work as it gets the filenames with querystrings that Rails provides.
      # BUT there's a chance it could break the ajax calls.
      location ~* \.(ico|css|gif|jpe?g|png|js)(\?[0-9]+)?$ {
         expires max;
         break;
      }

      # Error pages
      # error_page 500 502 503 504 /500.html;
      location = /500.html {
        root /app/current/public;
      }
    }

    server {
      listen 8090;
      server_name $server_name_from_env;

      location /status {
        stub_status on;
        access_log off;
      }
    }

    include /etc/nginx/conf.d/*.conf;
}
